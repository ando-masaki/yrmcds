<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="cybozu::thread_base" name="thread_base">
  <brief>A CRTP template wrapping std::thread.</brief>
  <doc>A curiously-recurring-template-pattern (CRTP) template to wrap
std::thread with associated data structures.  Derived classes
need to implement `void run()`.

std::system_error and std::exception will be caught and logged.
If `exit_on_exception` is not 0, then `exit(exit_on_exception)` is
called to terminate the program.</doc>
  <method id="cybozu::thread_base::start" name="start">
    <return>
      <type builtin="yes" name="void" ref="cybozu::hash_map::handler#cybozu::hash_map::handler" />
    </return>
  </method>
  <method id="cybozu::thread_base::run_in_try" name="run_in_try">
    <return>
      <type builtin="yes" name="void" ref="cybozu::hash_map::handler#cybozu::hash_map::handler" />
    </return>
  </method>
  <method id="cybozu::thread_base::done" name="done">
    <return>
      <type builtin="yes" name="bool" ref="cybozu::hash_map::handler#cybozu::hash_map::handler" />
    </return>
  </method>
  <field access="protected" id="cybozu::thread_base::m_done" name="m_done">
    <type name="std::atomic&lt;bool&gt;" />
  </field>
  <field access="protected" id="cybozu::thread_base::m_thread" name="m_thread">
    <type name="std::thread" />
  </field>
</classtemplate>